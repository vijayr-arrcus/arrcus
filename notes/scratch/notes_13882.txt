int unit = 0;
char *sflow_name = "sflow-test-if";
bcm_knet_netif_t netif;
bcm_knet_filter_t filter;
bcm_mac_t sys_mac = {0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf};

netif.port = 0;
netif.type = BCM_KNET_NETIF_T_TX_CPU_INGRESS;
netif.flags |= BCM_KNET_NETIF_F_RCPU_ENCAP;
sal_memcpy(netif.name, sflow_name, 15);
sal_memcpy(netif.mac_addr, sys_mac, 6);

rv = bcm_knet_netif_create(unit, &netif);
if (rv != BCM_E_NONE) {
  printf("failed to create netif %s\n",
         bcm_errmsg(rv));
  return rv;
}

bcm_knet_filter_t_init(&filter);
filter.type = BCM_KNET_FILTER_T_RX_PKT;
filter.priority = 1;
filter.dest_type = BCM_KNET_DEST_T_NETIF;
filter.dest_id = netif.id;
filter.match_flags = BCM_KNET_FILTER_M_REASON;
BCM_RX_REASON_SET(filter.m_reason, bcmRxReasonSampleSource);
rv = bcm_knet_filter_create(unit, &filter);
if (rv !=  BCM_E_NONE) {
  printf("failed to create filter %s\n",
         bcm_errmsg(rv));
  return rv;
}

printf("%s netif id %d filter id %d \n",
       sflow_name, netif.id, filter.id);
