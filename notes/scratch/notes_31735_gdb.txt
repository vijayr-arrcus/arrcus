(gdb) source ~/brk_points
gperf/ pmap/
(gdb) source ~/brk_points
Function "brk" not defined.
Make breakpoint pending on future shared library load? (y or [n]) [answered N; input not from terminal]
~/brk_points:2: Error in sourced command file:
Argument required (one or more breakpoint numbers).
(gdb) info break
No breakpoints or watchpoints.
(gdb) set breakpoint pending on
(gdb) spirce ~/brk_points
Undefined command: "spirce".  Try "help".
(gdb) source ~/brk_points
Function "brk" not defined.
Breakpoint 1 (brk) pending.
Function "mmap" not defined.
Breakpoint 2 (mmap) pending.
Function "mremap" not defined.
Breakpoint 3 (mremap) pending.
(gdb) info break
Num     Type           Disp Enb Address    What
1       breakpoint     keep y   <PENDING>  brk
        shell date
        bt
        continue
2       breakpoint     keep y   <PENDING>  mmap
        shell date
        bt
        continue
3       breakpoint     keep y   <PENDING>  mremap
        shell date
        bt
        continue
set pagination off
set logging on
set logging file /tmp/mem_trace/qos_gdb.log
set logging file /tmp/mem_tace/bgp_gdb.log
set breakpoint pending on

thread apply all bt


In GDB with a C program, you can do `watch *0x40020000` to set a watchpoint on a memory address, but this fails in Rust programs with a mysterious error. With a hint from @sheevink I found the solution: `watch *(0x40020000 as *const u32)`! gdb has a Rust parser!

watch *(uint64_t *) (address)

show can-use-hw-watchpoints

Set the Watchpoint on Memory Address: Once the program is halted at the breakpoint, you can set a watchpoint on a memory address using the watch command.

For example:watch *(int*)0xaddress

Replace 0xaddress with the memory address you want to watch.
You need to cast the address appropriately based on the data type you want to watch (int in this example).

set print repeats 0
set pagination off
set breakpoint pending on
break brk
  commands
    shell date
    bt
    continue
  end
break mmap
  commands
    shell date
    bt
    continue
  end
break mremap
  commands
    shell date
    bt
    continue
  end

(gdb) print *(dpal_mpsc_ctxt_p) 0x55d3ca984550
$1 = {c_h = 0x55d3ca984e20, slot_id = 0, machine_id = 0x55d3ca983280 "standalone", dist_platform = false,
  replay_in_progress = false, posted_restart_msg = true, snapshot_tbl_replayed = true, snapshot_cnt = 0,
  snapshot_replayed_cnt = 1, snapshot_tables_created = 0, snapshot_tables_acked = 0, snapshot_tables = {
    head = 0x55d3cb946340, cmp = 0x0}, snapshot_tblid = {klen = 44,
    key = 0x55d3cb946180 "/default/oper/dpal/common/dpal_snapshot_tbl/"}, hw_rsrc_user_tblid = {klen = 0,
    key = 0x0}, ctxt_str_uri = 0x21 <error: Cannot access memory at address 0x21>}
(gdb) set var ptr = (dpal_mpsc_ctxt_p) 0x55d3ca984550
No symbol "ptr" in current context.
(gdb) set var my_pointer = (dpal_mpsc_ctxt_p) 0x55d3ca984550
No symbol "my_pointer" in current context.
(gdb) set ptr=(dpal_mpsc_ctxt_p) 0x55d3ca984550
No symbol "ptr" in current context.
(gdb) set $ptr=(dpal_mpsc_ctxt_p) 0x55d3ca984550
(gdb) print ptr
No symbol "ptr" in current context.
(gdb) print $ptr
$2 = (dpal_mpsc_ctxt_p) 0x55d3ca984550
(gdb) print * $ptr
$3 = {c_h = 0x55d3ca984e20, slot_id = 0, machine_id = 0x55d3ca983280 "standalone", dist_platform = false,
  replay_in_progress = false, posted_restart_msg = true, snapshot_tbl_replayed = true, snapshot_cnt = 0,
  snapshot_replayed_cnt = 1, snapshot_tables_created = 0, snapshot_tables_acked = 0, snapshot_tables = {
    head = 0x55d3cb946340, cmp = 0x0}, snapshot_tblid = {klen = 44,
    key = 0x55d3cb946180 "/default/oper/dpal/common/dpal_snapshot_tbl/"}, hw_rsrc_user_tblid = {klen = 0,
    key = 0x0}, ctxt_str_uri = 0x21 <error: Cannot access memory at address 0x21>}
(gdb) print &$ptr->ctxt_str_uri
$4 = (char **) 0x55d3ca9845a8
(gdb) q




0x563eedd6f540
dpal_main_ctxt_t           dpal_main_ctxt;
  dpal_mpsc_ctxt_p            mpsc_ctxt_p;
