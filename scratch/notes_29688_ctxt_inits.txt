worker context --> plugin context --> device context

worker context
		DPAL_CTX_GLOBAL

dpal_init_worker_plugin_ctxt
		list of plugins:
		typedef enum dpal_plugin_type_ {
			DPAL_PLUGIN_GLOBAL = 1,
			DPAL_PLUGIN_BCMXGS,
			DPAL_PLUGIN_BCMDNX,
			DPAL_PLUGIN_BCMDNX_J2,
			DPAL_PLUGIN_BCMDNX_X2C,
			DPAL_PLUGIN_BCMDNX_Q2A,
			DPAL_PLUGIN_BCMDNXF_RAMON,
			DPAL_PLUGIN_LXKERNEL,
			DPAL_PLUGIN_MOCK,
			DPAL_PLUGIN_BCMDNX_MOCK,
			DPAL_PLUGIN_INTELBF_TOFINO,
			DPAL_PLUGIN_MAX,
		} dpal_plugin_type_e;

    context type of each of them is of type DPAL_CTX_PLUGIN

		for each device there can be multiple devices...
						each with a context of type DPAL_CTX_DEVICE..

cplane objects are added to the worker ctxt...
			pd objects are added to the device context...

cfg_object gets called with plugin ctxt..
			pd objects are added per device_context...



dpal_dist_plugin_worker
	each worker can cater to one or more plugins


void dpal_obj_acc_get_meta (void *ctxt_in, uint32_t obj_type,
                            aom_obj_meta_h *m_h)
{

  dpal_cmn_ctxt_t *ctxt = (dpal_cmn_ctxt_t *)ctxt_in;
  avl_node_t *node = NULL;
  dpal_obj_meta_ent_t *obj_ent = NULL;

  *m_h = NULL;

  if (ctxt->ctx_type == DPAL_CTX_PLUGIN) {
    dpal_plugin_ctxt_t *pg_ctxt = (dpal_plugin_ctxt_t *)ctxt;
    ctxt = (dpal_cmn_ctxt_t *)pg_ctxt->worker_ctxt;
  }
  while (!node) {
    node = avl_tree_lookup(ctxt->meta_tree, &obj_type);
    if (node) {
      break;
    }
    if (ctxt->ctx_type == DPAL_CTX_DEVICE) {
      dpal_dev_ctxt_t *dev_ctxt = (dpal_dev_ctxt_t *)ctxt;
      ctxt = (dpal_cmn_ctxt_t *)dev_ctxt->plugin_ctxt->worker_ctxt;
    } else {
      LOG_ERR_MSG("DPAL ACC", "Meta for obj_type %u not found\n",
      obj_type);
      return;
    }
  }

  AVL_TREE_USER_DATA(node, obj_ent);
  if (obj_ent)
    *m_h = obj_ent->m_h;
  return;
}


the meta tree is either for work context (cplane object) or
for device context (pd objects) so if we receive context as plugin go to work context and check..
if we receive device context and we failed to look up go to worker context since it could be cplane object..

both cplane and global objects are per worker thread..

worker or device context maintains a tree of meta handles for each object type..

