bcm_ltsw_pktio_pmd_field_get(unit, pkt_ptr, bcmPktioPmdTypeRxFlex,
														BCM_PKTIO_RXPMD_FLEX_SVP_15_0, &val);
#define PKTIO_RXPMD_SIZE    (96)
#define PKTIO_TX_MH_SIZE    (32)

					void
					bcm_pktio_pmd_t_init(bcm_pktio_pmd_t *pmd)
					{
							if (pmd != NULL) {
									pmd->rxpmd = pmd->data;
									pmd->txpmd = pmd->rxpmd + PKTIO_RXPMD_SIZE / 4;
									pmd->higig = pmd->txpmd + PKTIO_TX_MH_SIZE / 4;
									pmd->lbhdr = pmd->higig + PKTIO_TX_MH_SIZE / 4;
							}
					}


  mbcm_ltsw_pktio_fid_info_get(unit, &hdr_info, &fid_info)
      bcm56880_a0_dna_4_8_7_0_rxpmd_flex_db
          {
            .fid = BCM_PKTIO_RXPMD_FLEX_SVP_15_0,
            .lt_fid = BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_SVP_15_0,
            .profile_bmp = 0x3c,
          }
  bcmpkt_rxpmd_get((bcmpkt_packet_t *)packet, &rxpmd)
      *rxpmd = packet->pmd.rxpmd;
  bcmpkt_rxpmd_field_get(pi->dev_type, rxpmd,
                         BCMPKT_RXPMD_MPB_FLEX_DATA_TYPE, &flex_profile));
											   fid = BCMPKT_RXPMD_MPB_FLEX_DATA_TYPE
       *val = rxpmd_fget[dev_type]->fget[fid](rxpmd);
                      bcm56880_a0_rxpmd_fget
															bcmpkt_rxpmd_mpb_flex_data_type_get
                                      static uint32_t
																			bcmpkt_rxpmd_mpb_flex_data_type_get(uint32_t *data) { // data is rxpmd
																				uint32_t val;
																				val = WORD_FIELD_GET(data[3], 0, 7); // Word start, offset, number of bits
																				return val;
																			}
  bcmpkt_rxpmd_flexdata_get(pi->dev_type, rxpmd, &flexpmd, &len)  ==> rxpmd|rxpmdflex|srcmac|dstmac.....
         static uint32_t bcmpkt_rxpmd_i_flex_data_get(uint32_t *data, uint32_t **addr) {
               *addr = data + 4;
               return 13;
         }
  bcmpkt_flexhdr_header_id_get(pi->variant, "RXPMD_FLEX_T", &hid));
              {"RXPMD_FLEX_T", BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_T},\
              #define BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_T                  66
  bcmpkt_flexhdr_field_get(bcmlrd_variant_t variant, uint32_t hid,
                           uint32_t *flexhdr, int profile, int fid, uint32_t *val) {
              pmd_info = flex_pmd_info_get[variant](hid);
                     bcm56880_a0_dna_4_8_7_0_flexhdr_info_list
                        .flex_fget = bcm56880_a0_dna_4_8_7_0_rxpmd_flex_fget,
              static int32_t bcmpkt_rxpmd_flex_svp_15_0_get(uint32_t *data, int profile, uint32_t *val) {
                int32_t ret = SHR_E_NONE;
                switch (profile) {
                  case 2:
                    *val = WORD_FIELD_GET(data[9], 16, 16);
                    break;
                  case 3:
                    *val = WORD_FIELD_GET(data[9], 16, 16);
                    break;
                  case 4:
                    *val = WORD_FIELD_GET(data[9], 16, 16);
                    break;
                  case 5:
                    *val = WORD_FIELD_GET(data[9], 16, 16);
                    break;
                  default:
                    ret = SHR_E_PARAM;
                    break;
                }
                return ret;
              }
							static int32_t bcmpkt_rxpmd_flex_system_destination_15_0_get(uint32_t *data, int profile, uint32_t *val) {
									int32_t ret = SHR_E_NONE;

									switch (profile) {
											case 2:
													*val = WORD_FIELD_GET(data[4], 16, 16);
													break;
											case 3:
													*val = WORD_FIELD_GET(data[3], 0, 16);
													break;
											case 4:
													*val = WORD_FIELD_GET(data[4], 16, 16);
													break;
											case 5:
													*val = WORD_FIELD_GET(data[3], 0, 16);
													break;
											default:
													ret = SHR_E_PARAM;
													break;
									}

									return ret;
							}

  }


bcm_pktio_pmd_field_get(unit, pkt_ptr, bcmPktioPmdTypeRx,
                        BCM_PKTIO_RXPMD_SRC_PORT_NUM)
  bcm_ltsw_pktio_pmd_field_get(int unit, bcm_pktio_pkt_t *packet,
                               bcm_pktio_pmd_type_t type,
                               int fid, uint32_t *val)
        bcmpkt_rxpmd_get(bcmpkt_packet_t *packet, uint32_t **rxpmd)
        bcmpkt_rxpmd_field_get(bcmdrd_dev_type_t dev_type, uint32_t *rxpmd,
                                                      int fid, uint32_t *val)
              bcm56880_a0_rxpmd_fget
										static uint32_t bcmpkt_rxpmd_src_port_num_get(uint32_t *data) {
													uint32_t val;
													val = WORD_FIELD_GET(data[0], 8, 8);
													return val;
										}
										static uint32_t bcmpkt_rxpmd_pkt_length_get(uint32_t *data)
										{
												uint32_t val;
												val = WORD_FIELD_GET(data[0], 16, 16);
												return val;
										}
										static uint32_t bcmpkt_rxpmd_multicast_get(uint32_t *data)
										{
												uint32_t val;
												val = WORD_FIELD_GET(data[3], 16, 1);
												return val;
										}

bcm_pktio_pmd_reasons_get(unit, pkt_ptr, &reasons);
   bcmpkt_rxpmd_get((bcmpkt_packet_t *)packet, &rxpmd)
   bcmpkt_rxpmd_flexdata_get(pi->dev_type, rxpmd, &flexpmd, &len)
   bcmpkt_rxpmd_flex_reasons_get(pi->variant, flexpmd, &flex_reasons)
        static void bcm56880_a0_dna_4_8_7_0_rxpmd_flex_reason_decode(uint32_t *data, bcmpkt_bitmap_t *reasons)
{
    uint32_t *reason = data + 0;

    if (reason[12] & (0x1 << 0)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_NO_COPY_TO_CPU);
    }
    if (reason[12] & (0x1 << 1)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_CML_FLAGS);
    }
    if (reason[12] & (0x1 << 2)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_L2_SRC_STATIC_MOVE);
    }
    if (reason[12] & (0x1 << 3)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_L2_SRC_DISCARD);
    }
    if (reason[12] & (0x1 << 4)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_MACSA_MULTICAST);
    }
    if (reason[12] & (0x1 << 5)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_PKT_INTEGRITY_CHECK_FAILED);
    }
    if (reason[12] & (0x1 << 6)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_PROTOCOL_PKT);
    }
    if (reason[12] & (0x1 << 7)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_MEMBERSHIP_CHECK_FAILED);
    }
    if (reason[12] & (0x1 << 8)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_SPANNING_TREE_CHECK_FAILED);
    }
    if (reason[12] & (0x1 << 9)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_L2_DST_LOOKUP_MISS);
    }
    if (reason[12] & (0x1 << 10)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_L2_DST_LOOKUP);
    }
    if (reason[12] & (0x1 << 11)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_L3_DST_LOOKUP_MISS);
    }
    if (reason[12] & (0x1 << 12)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_L3_DST_LOOKUP);
    }
    if (reason[12] & (0x1 << 13)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_L3_HDR_ERROR);
    }
    if (reason[12] & (0x1 << 14)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_L3_TTL_ERROR);
    }
    if (reason[12] & (0x1 << 15)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_IPMC_L3_IIF_OR_RPA_ID_CHECK_FAILED);
    }
   if (reason[12] & (0x1 << 16)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_LEARN_CACHE_FULL);
    }
    if (reason[12] & (0x1 << 17)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_VFP);
    }
    if (reason[12] & (0x1 << 18)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_IFP);
    }
    if (reason[12] & (0x1 << 19)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_IFP_METER);
    }
    if (reason[12] & (0x1 << 20)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_DST_FP);
    }
    if (reason[12] & (0x1 << 21)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_SVP);
    }
    if (reason[12] & (0x1 << 22)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_EM_FT);
    }
    if (reason[12] & (0x1 << 23)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_IVXLT);
    }
    if (reason[12] & (0x1 << 24)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_MIRROR_SAMPLER_SAMPLED);
    }
    if (reason[12] & (0x1 << 25)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_MIRROR_SAMPLER_EGR_SAMPLED);
    }
    if (reason[12] & (0x1 << 26)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_SER_DROP);
    }
    if (reason[12] & (0x1 << 27)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_URPF_CHECK_FAILED);
    }
    if (reason[12] & (0x1 << 28)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_L3_IIF_EQ_L3_OIF);
    }
    if (reason[12] & (0x1 << 29)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_DLB_ECMP_MONITOR_EN_OR_MEMBER_REASSINED);
    }
    if (reason[12] & (0x1 << 30)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_DLB_LAG_MONITOR_EN_OR_MEMBER_REASSINED);
    }
    if (reason[12] & (0x1 << 31)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_MPLS_CTRL_PKT_TO_CPU);
    }
    if (reason[11] & (0x1 << 0)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_MATCHED_RULE_BIT_0);
    }
f (reason[11] & (0x1 << 1)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_MATCHED_RULE_BIT_1);
    }
    if (reason[11] & (0x1 << 2)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_MATCHED_RULE_BIT_2);
    }
    if (reason[11] & (0x1 << 3)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_MATCHED_RULE_BIT_3);
    }
    if (reason[11] & (0x1 << 4)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_MATCHED_RULE_BIT_4);
    }
    if (reason[11] & (0x1 << 5)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_MATCHED_RULE_BIT_5);
    }
    if (reason[11] & (0x1 << 6)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_MATCHED_RULE_BIT_6);
    }
    if (reason[11] & (0x1 << 7)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_MATCHED_RULE_BIT_7);
    }
    if (reason[11] & (0x1 << 15)) {
        BCMPKT_RXPMD_FLEX_REASON_SET(*reasons, BCM56880_A0_DNA_4_8_7_0_BCMPKT_RXPMD_FLEX_REASON_TRACE_DOP);
    }
